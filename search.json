[
  {
    "objectID": "create_modeling_options.html",
    "href": "create_modeling_options.html",
    "title": "Create modeling options",
    "section": "",
    "text": "source\n\ncreate_modeling_options\n\n create_modeling_options (time_step_for_evapo:int=1, reset_swc:bool=False,\n                          avoid_water_soil_transfer:bool=True,\n                          soil_evapo:bool=True, defoliation:bool=False,\n                          threshold_mortality:int=90,\n                          transpiration_model:str=['jarvis', 'granier'],\n                          etp_formulation:str=['pt', 'penman'],\n                          rn_formulation:str=['linacre', 'linear'],\n                          pedo_transfer_formulation:str=['vg',\n                          'campbell'], constant_climate:bool=False,\n                          comp_options_for_evapo:str=['normal',\n                          'accurate', 'fast', 'custom'],\n                          custom_small_time_step_in_sec:int=600,\n                          lcav:int=1, scav:int=1, eord:int=1,\n                          numerical_scheme:str=['implicit', 'semi-\n                          implicit', 'explicit'],\n                          stomatal_reg_formulation:str=['sigmoid',\n                          'piecewise_linear', 'turgor'],\n                          print_prog:bool=True)\n\nCreate a dictionary containing modeling options that can be used as an input in run.SurEauR\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntime_step_for_evapo\nint\n1\ntime step for the main evapotranspiration loop. Should be one of the following 1,2,4,6,8\n\n\nreset_swc\nbool\nFalse\nBoolean indicating whether soil layers should be refilled at the beginning of each year\n\n\navoid_water_soil_transfer\nbool\nTrue\nYet to be implemented. Boolean indicating whether the transfer of water between soil layers should be avoided by disconnecting the soil layers that get refilled from the soil-plant system\n\n\nsoil_evapo\nbool\nTrue\nBoolean indicating whether soil evaporation should be simulated (True) or not (False)\n\n\ndefoliation\nbool\nFalse\nBoolean indicating whether trees should loose leaves whenoccurs.cavitation occurs of the above part of plant. Defoliation starts only when PLC_Leaf &gt; 10% .\n\n\nthreshold_mortality\nint\n90\nPercentange value indicating the percentage loss of conductivity above which the plant is considered dead and simulation stops for the current year.\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\netp_formulation\nstr\n[‘pt’, ‘penman’]\n\n\n\nrn_formulation\nstr\n[‘linacre’, ‘linear’]\nthe formulation of ETP to be used, either pt (Priestley-Taylor) or penman (Penmman)\n\n\npedo_transfer_formulation\nstr\n[‘vg’, ‘campbell’]\nmethod to be used to calculate net radiation from global radiation, either linacre or ‘linear’ (the linear method is not implemnted yet)\n\n\nconstant_climate\nbool\nFalse\nBoolian indicating whether the climate should be considered constant or not\n\n\ncomp_options_for_evapo\nstr\n[‘normal’, ‘accurate’, ‘fast’, ‘custom’]\n\n\n\ncustom_small_time_step_in_sec\nint\n600\nTime step in seconds. Use if comp_options_for_evapo is set to custom\n\n\nlcav\nint\n1\nUnknown parameter definition\n\n\nscav\nint\n1\nUnknown parameter definition\n\n\neord\nint\n1\nUnknown parameter definition\n\n\nnumerical_scheme\nstr\n[‘implicit’, ‘semi-implicit’, ‘explicit’]\n\n\n\nstomatal_reg_formulation\nstr\n[‘sigmoid’, ‘piecewise_linear’, ‘turgor’]\nUnknown parameter definition\n\n\nprint_prog\nbool\nTrue\nUnknown parameter definition\n\n\nReturns\ntyping.Dict\n\n\n\n\n\n\nExample: Create modeling options dictionary\n\ncreate_modeling_options(\n    time_step_for_evapo=2,\n    reset_swc=True,\n    avoid_water_soil_transfer=True,\n    constant_climate=True,\n    defoliation=True,\n    soil_evapo=True,\n    threshold_mortality=51,\n    etp_formulation=\"pt\",\n    rn_formulation=\"linear\",\n    comp_options_for_evapo=\"custom\",\n    stomatal_reg_formulation=\"turgor\",\n    transpiration_model=\"jarvis\",\n    numerical_scheme=\"implicit\",\n    pedo_transfer_formulation=\"vg\",\n)\n\ndefaultdict(list,\n            {'constant_climate': True,\n             'etp_formulation': 'pt',\n             'rn_formulation': 'linear',\n             'pedo_transfer_formulation': 'vg',\n             'time_step_for_evapo': 2,\n             'time': array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22]),\n             'reset_swc': True,\n             'avoid_water_soil_transfer': True,\n             'comp_options': defaultdict(list,\n                         {'numerical_scheme': 'implicit',\n                          'nsmalltimesteps': 12.0,\n                          'lsym': 1,\n                          'ssym': 1,\n                          'clapo': 1,\n                          'ctapo': 1,\n                          'eord': 1,\n                          'lcav': 1,\n                          'scav': 1}),\n             'stomatal_reg_formulation': 'turgor',\n             'soil_evapo': True,\n             'defoliation': True,\n             'threshold_mortality': 51,\n             'transpiration_model': 'jarvis',\n             'print_prog': True})"
  },
  {
    "objectID": "create_stand_parameters.html",
    "href": "create_stand_parameters.html",
    "title": "Create stand parameters",
    "section": "",
    "text": "source\n\ncreate_stand_parameters\n\n create_stand_parameters (file_path:pathlib.Path=None, lai_max:float=None,\n                          latitude:float=None, longitude:float=None,\n                          sep:str=';')\n\nCreate a dictionary with stand parameters that can be used as in input in \n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\nNone\nPath to a csv file containing lai_max, latitude and longitude values i.e path/to/parameter_values.csv\n\n\nlai_max\nfloat\nNone\nValue indicating the maximum leaf area index of the stand (m2/m2)\n\n\nlatitude\nfloat\nNone\nValue indicating the latitude of the stand\n\n\nlongitude\nfloat\nNone\nValue indicating the longitude of the stand\n\n\nsep\nstr\n;\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\ntyping.Dict\n\nDictionary containing parameters\n\n\n\n\nsource\n\n\nStandFile\n\n StandFile (*args, **kwargs)\n\nSchema for validating the input stand parameter data. The CSV must contain columns with the plot_id, lai_max, latitude, and longitude\n\nExample: Create stand parameters dictionary\n\ncreate_stand_parameters(\n    file_path=\"./sample_data/stand_example.csv\",\n    lai_max=None,\n    latitude=None,\n    longitude=None,\n    sep=\";\",\n)\n\ndefaultdict(list, {'lai_max': 4.5, 'latitude': 48.73, 'longitude': 6.23})\n\n\n\ncreate_stand_parameters(\n    file_path=None, lai_max=2.0, latitude=41.1, longitude=2.1\n)\n\ndefaultdict(list, {'lai_max': 2.0, 'latitude': 41.1, 'longitude': 2.1})"
  },
  {
    "objectID": "create_simulation_parameters.html",
    "href": "create_simulation_parameters.html",
    "title": "Create simulation parameters",
    "section": "",
    "text": "source\n\ncreate_simulation_parameters\n\n create_simulation_parameters (main_dir:str, start_year_simulation:int,\n                               end_year_simulation:int, output_path:str,\n                               output_type:str=None,\n                               resolution_output:str='subdaily',\n                               overwrite:bool=False)\n\nCreate a dictionary with the simulation parameters to run SureauEcos. Can be used as an input in\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmain_dir\nstr\n\nUnknown parameter definition\n\n\nstart_year_simulation\nint\n\nInteger indicating the starting year for the simulation\n\n\nend_year_simulation\nint\n\nInteger indicating the ending year for the simulation (must match the dates of the input climate data file)\n\n\noutput_path\nstr\n\nPath of output result file.\n\n\noutput_type\nstr\nNone\nThe output variables of the model that should be written in the output model file.\n\n\nresolution_output\nstr\nsubdaily\nthe resolution chosen to write variables in files, subdaily, daily or yearly.\n\n\noverwrite\nbool\nFalse\nIndicates whether the output result file can be overwritten if it already exists\n\n\nReturns\ntyping.Dict\n\n\n\n\n\n\nExample: Create simulation parameters dictionary\n\ncreate_simulation_parameters(\n    main_dir=\"./sample_data\",\n    start_year_simulation=1991,\n    end_year_simulation=1991,\n    output_type=\"simple_daily\",\n    output_path=\"./sample_data\",\n    overwrite=True,\n    resolution_output=\"subdaily\",\n)\n\ndefaultdict(list,\n            {'main_dir': './sample_data',\n             'resolution_output': 'subdaily',\n             'output_type': 'simple_daily',\n             'output_path': './sample_data/sureau_output',\n             'start_year_simulation': 1991,\n             'end_year_simulation': 1991})"
  },
  {
    "objectID": "create_climate_data.html",
    "href": "create_climate_data.html",
    "title": "Create climate data",
    "section": "",
    "text": "source\n\ncreate_climate_data\n\n create_climate_data (simulation_parameters:Dict, modeling_options:Dict,\n                      file_path:pathlib.Path, sep:str=';')\n\nCreate a climate data.frame to run SureauR. Read input climate data select the desired period and put it in the right format to run run.SurEauR Also check data consistency and input variables according to modeling options (see and simulation parameters (see \\code{create.simulation.parameters)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsimulation_parameters\ntyping.Dict\n\nDictionary created using the create_simulation_parameters function\n\n\nmodeling_options\ntyping.Dict\n\nDictionary created using the create_modeling_options function\n\n\nfile_path\nPath\n\nPath to the input CSV climate file. i.e. path/to/file/climate.csv\n\n\nsep\nstr\n;\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\npandera.typing.pandas.DataFrame[main.ClimateDataValidation]\n\n\n\n\n\n\nsource\n\n\nClimateDataValidation\n\n ClimateDataValidation (*args, **kwargs)\n\nSchema for validating the climate data\n\nExample: Create climate dataframe\n\nsimulation_parameters_dict = create_simulation_parameters(\n    main_dir=\"./sample_data\",\n    start_year_simulation=1991,\n    end_year_simulation=1991,\n    output_type=None,\n    output_path=\"./sample_data\",\n    overwrite=True,\n    resolution_output=\"subdaily\",\n)\n\n\nmodeling_options_dict = create_modeling_options(\n    time_step_for_evapo=2,\n    reset_swc=True,\n    avoid_water_soil_transfer=True,\n    constant_climate=False,\n    defoliation=True,\n    soil_evapo=True,\n    threshold_mortality=51,\n    etp_formulation=\"pt\",\n    rn_formulation=\"linear\",\n    comp_options_for_evapo=\"custom\",\n    stomatal_reg_formulation=\"turgor\",\n    transpiration_model=\"jarvis\",\n    numerical_scheme=\"implicit\",\n    pedo_transfer_formulation=\"vg\",\n)\n\n\ncreate_climate_data(\n    modeling_options=modeling_options_dict,\n    simulation_parameters=simulation_parameters_dict,\n    file_path=\"./sample_data/climat_example.csv\",\n    sep=\";\",\n)\n\n365 days were selected in the input climate file, covering the period: 1991 - 1991\n\n\n\n\n\n\n\n\n\nDATE\nTair_min\nTair_max\nTair_mean\nRG_sum\nRHair_min\nRHair_max\nRHair_mean\nWS_mean\nPPT_sum\nday_of_year\nday_of_month\nmonth\nyear\n\n\n\n\n365\n1991-01-01\n2.6\n7.3\n4.95\n3.20\n95.160421\n95.160421\n95.160421\n3.1\n1.2\n1\n1\n1\n1991\n\n\n366\n1991-01-02\n3.5\n9.0\n6.25\n0.76\n90.403122\n95.000000\n92.701561\n5.8\n9.8\n2\n2\n1\n1991\n\n\n367\n1991-01-03\n8.5\n10.7\n9.60\n1.16\n92.731052\n95.000000\n93.865526\n4.8\n4.8\n3\n3\n1\n1991\n\n\n368\n1991-01-04\n3.4\n9.6\n6.50\n1.16\n96.644009\n96.644009\n96.644009\n2.6\n5.0\n4\n4\n1\n1991\n\n\n369\n1991-01-05\n2.3\n6.3\n4.30\n3.25\n96.915145\n96.915145\n96.915145\n5.4\n1.0\n5\n5\n1\n1991\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n725\n1991-12-27\n4.1\n6.6\n5.35\n2.23\n85.326980\n95.000000\n90.163490\n1.9\n0.2\n361\n27\n12\n1991\n\n\n726\n1991-12-28\n-1.5\n5.9\n2.20\n4.19\n96.915145\n96.915145\n96.915145\n1.4\n0.0\n362\n28\n12\n1991\n\n\n727\n1991-12-29\n-2.6\n4.0\n0.70\n4.72\n96.915145\n96.915145\n96.915145\n1.4\n0.0\n363\n29\n12\n1991\n\n\n728\n1991-12-30\n2.4\n4.4\n3.40\n1.19\n96.915145\n96.915145\n96.915145\n1.8\n0.0\n364\n30\n12\n1991\n\n\n729\n1991-12-31\n-0.2\n2.7\n1.25\n0.71\n96.915145\n96.915145\n96.915145\n1.7\n0.0\n365\n31\n12\n1991\n\n\n\n\n365 rows × 14 columns"
  },
  {
    "objectID": "soil_utils.html",
    "href": "soil_utils.html",
    "title": "Soil utils functions",
    "section": "",
    "text": "source\n\ncompute_b\n\n compute_b (lv:float)\n\nCalculate b used to compute the B of the Gardnar-Cowen model\n\n\n\n\nType\nDetails\n\n\n\n\nlv\nfloat\nlength of fine root per unit volume\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_b_gc\n\n compute_b_gc (la:float, b:float, root_radius:float)\n\nCalculate B Gardner cowen thhe scaling factor for soil conductance\n\n\n\n\nType\nDetails\n\n\n\n\nla\nfloat\nUnknown parameter definition\n\n\nb\nfloat\nUnknown parameter definition\n\n\nroot_radius\nfloat\nCalculated using the compute_b function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil\n\n compute_k_soil (rew:float, i_vg:float, n_vg:float, k_sat_vg:float,\n                 b_gc:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\ni_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nk_sat_vg\nfloat\nUnknown parameter definition\n\n\nb_gc\nfloat\nCalculated using the compute_b_gc function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil_camp\n\n compute_k_soil_camp (sws:float, tsc:float, b_camp:float,\n                      k_sat_campbell:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nk_sat_campbell\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil\n\n compute_p_soil (rew:float, alpha_vg:float, n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil_camp\n\n compute_p_soil_camp (sws:float, tsc:float, b_camp:float, psie:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_theta_at_given_p_soil\n\n compute_theta_at_given_p_soil (psi_target:float, theta_res:float,\n                                theta_sat:float, alpha_vg:float,\n                                n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\ntheta_res\nfloat\nUnknown parameter definition\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter\n\ncompute_theta_at_given_p_soil(\n    psi_target=2, theta_res=3, theta_sat=4, alpha_vg=5, n_vg=1.1\n)\n\n3.316227675107904\n\n\n\ncompute_theta_at_given_p_soil(\n    psi_target=np.array([1.5, 2]),\n    theta_res=np.array([3, -2]),\n    theta_sat=np.array([-6, -7]),\n    alpha_vg=np.array([9.02, 2.9]),\n    n_vg=np.array([-1.5, 0.001]),\n)\n\narray([-5.99999970e+000, -6.51316634e+303])\n\n\n\nsource\n\n\n\ncompute_theta_at_given_p_soil_camp\n\n compute_theta_at_given_p_soil_camp (theta_sat:float, psi_target:float,\n                                     psie:float, b_camp:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter for Campbell formulation\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=-1.5, theta_sat=0.39, psie=-0.025, b_camp=-4.0\n)\n\n0.14012860366560284\n\n\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=np.array([-1.5, -2]),\n    theta_sat=np.array([0.70]),\n    psie=np.array([-0.025, -4]),\n    b_camp=np.array([-4.0, -6]),\n)\n\narray([0.25151288, 0.78572343])\n\n\n\nsource\n\n\n\nread_soil_file\n\n read_soil_file (file_path:pathlib.Path, modeling_options:Dict=None,\n                 sep:str=';')\n\nFunction for reading a data frame containing information about soil characteristics\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to a csv file containing parameter values i.e path/to/file_name.csv\n\n\nmodeling_options\ntyping.Dict\nNone\nDictionary created using the create_modeling_options function\n\n\nsep\nstr\n;\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\ntyping.Dict\n\n\n\n\n\n\nsource\n\n\nSoilFile\n\n SoilFile (*args, **kwargs)\n\nSchema for validating the input soil parameter file\n\nExample: Read CSV file with Soil parameters\n\nmodeling_options_dict = create_modeling_options(\n    time_step_for_evapo=2,\n    reset_swc=True,\n    avoid_water_soil_transfer=True,\n    constant_climate=False,\n    defoliation=True,\n    soil_evapo=True,\n    threshold_mortality=51,\n    etp_formulation=\"pt\",\n    rn_formulation=\"linear\",\n    comp_options_for_evapo=\"custom\",\n    stomatal_reg_formulation=\"turgor\",\n    transpiration_model=\"jarvis\",\n    numerical_scheme=\"implicit\",\n    pedo_transfer_formulation=\"vg\",\n)\n\n\nread_soil_file(\n    \"./sample_data/soil_example.csv\",\n    modeling_options=modeling_options_dict,\n    sep=\";\",\n)\n\ndefaultdict(list,\n            {'rfc_1': 75.0,\n             'rfc_2': 82.0,\n             'rfc_3': 94.0,\n             'wilting_point': 0.12379,\n             'alpha_vg': 0.0005,\n             'n_vg': 1.55,\n             'i_vg': 0.5,\n             'ksat_vg': 10.0,\n             'saturation_capacity_vg': 1.0,\n             'residual_capacity_vg': 0.098,\n             'g_soil_0': 30.0,\n             'depth_1': 0.2,\n             'depth_2': 1.0,\n             'depth_3': 4.0})"
  },
  {
    "objectID": "plant_utils.html",
    "href": "plant_utils.html",
    "title": "Plant utils functions",
    "section": "",
    "text": "source\n\nrs_comp\n\n rs_comp (pi_ft:float, e_symp:float, p_min:float)\n\nCompute Rs from pmin (resolution from Bartlet et al 2012 EcolLett and email Herve Cochard 19/06/2015)\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\np_min\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nturgor_comp\n\n turgor_comp (pi_ft:float, e_symp:float, r_stemp:float)\n\nTurgor pressure\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_turgor_from_psi\n\n compute_turgor_from_psi (pi_ft:float, e_symp:float, psi:List)\n\nComputes Turgor pressure from Pressure-Volume curves parameters and water potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\npsi\ntyping.List\nList of Water potential of the organ (MPa)\n\n\nReturns\narray\n\n\n\n\n\nExample: Compute turgor\n\ncompute_turgor_from_psi(pi_ft=2, e_symp=3, psi=[1, 2, 3])\n\narray([0., 0., 0.])\n\n\n\nError: Function only return zeros\n\nfor each_psi in range(1, 10):\n    print(compute_turgor_from_psi(pi_ft=2, e_symp=3, psi=[each_psi]))\n\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n\n\n\nsource\n\n\n\n\nosmo_comp\n\n osmo_comp (pi_ft:float, r_stemp:float)\n\nCompute osmotic potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\npsi_total_symp_comp\n\n psi_total_symp_comp (pi_ft:float, e_symp:float, r_stemp:float)\n\nCompute Total potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nstomatal_regulation_turgor\n\n stomatal_regulation_turgor (turgor_pressure:float,\n                             max_turgor_pressure:float, e_max:float,\n                             e_cuti:float)\n\nThis function computes stomatal regulation if stomatal closure is limited (linearly) by turgor pressure\n\n\n\n\nType\nDetails\n\n\n\n\nturgor_pressure\nfloat\nTurgor pressure\n\n\nmax_turgor_pressure\nfloat\nMaximum turgor pressure,\n\n\ne_max\nfloat\nUnknown parameter definition\n\n\ne_cuti\nfloat\nResidual Transpiration\n\n\nReturns\narray\n\n\n\n\n\nExample: Compute Stomatal Regulation\n\nstomatal_regulation_turgor(\n    turgor_pressure=1, max_turgor_pressure=2, e_max=3, e_cuti=4\n)\n\narray([1.5, 3. ])\n\n\n\nsource\n\n\n\nplc_comp\n\n plc_comp (p_min:float, slope:float, p50:float)\n\nCompute Percentage loss of conductivity\n\n\n\n\nType\nDetails\n\n\n\n\np_min\nfloat\nUnknown parameter definition\n\n\nslope\nfloat\nUnknown parameter definition\n\n\np50\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nplc_prime_comp\n\n plc_prime_comp (plc:float, slope:float)\n\nThis function computes PLC Prime from PLC current value\n\n\n\n\nType\nDetails\n\n\n\n\nplc\nfloat\nComputed using the plc_comp function\n\n\nslope\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ngs_curve\n\n gs_curve (x:float, slope_gs:float, p50_gs:float, psi_start_closing:float,\n           psi_close:float, pi_ft:float, e_symp:float,\n           turgor_pressure_at_gs_max:float, gs_max:float,\n           transpiration_model:str=['jarvis', 'granier'],\n           stomatal_reg_formulation:str=['sigmoid', 'piecewise_linear',\n           'turgor'])\n\nTo obtain plots of the gs regulation curve\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nx\nfloat\n\nUnknown parameter definition\n\n\nslope_gs\nfloat\n\nUnknown parameter definition\n\n\np50_gs\nfloat\n\nUnknown parameter definition\n\n\npsi_start_closing\nfloat\n\nUnknown parameter definition\n\n\npsi_close\nfloat\n\nUnknown parameter definition\n\n\npi_ft\nfloat\n\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\n\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nturgor_pressure_at_gs_max\nfloat\n\nUnknown parameter definition\n\n\ngs_max\nfloat\n\nUnknown parameter definition\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\nstomatal_reg_formulation\nstr\n[‘sigmoid’, ‘piecewise_linear’, ‘turgor’]\n\n\n\nReturns\nfloat\n\ntype of regulation to be used for stomatal response to leaf symplasmic water potential, either sigmoid or piecewise_linear\n\n\n\n\nsource\n\n\ncompute_gmin\n\n compute_gmin (leaf_temp:float, gmin_20:float, t_phase:float, q10_1:float,\n               q10_2:float, gmin_temp_off=False)\n\nCalculate minimum conductance (gmin) following Cochard et al. (2019)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nleaf_temp\nfloat\n\nTemperature of the leaf (degC)\n\n\ngmin_20\nfloat\n\nleaf conductance at 20 degC\n\n\nt_phase\nfloat\n\nTemperature for phase transition of gmin\n\n\nq10_1\nfloat\n\nQ10 values for g_min= f(T) below T_phase\n\n\nq10_2\nfloat\n\nQ10 values for g_cuti = f(T) above T_phase\n\n\ngmin_temp_off\nbool\nFalse\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_emin\n\n compute_emin (gmin:float, vpd:float, g_bl:float, g_crown:float,\n               air_pressure:float=101.3)\n\nCalculate minimum transpiration (emin)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngmin\nfloat\n\nminimum conductance\n\n\nvpd\nfloat\n\nVapor Pressure Deficit (kPa)\n\n\ng_bl\nfloat\n\nUnknown parameter definition\n\n\ng_crown\nfloat\n\nUnknown parameter definition. Use compute_g_crown\n\n\nair_pressure\nfloat\n101.3\nSurface air pressure (kPa)\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_dfmc\n\n compute_dfmc (vpd:float, fm0=5.43, fm1=52.91, m=0.64)\n\nCompute dead fuel moisture content from VPD following De Dios et al. (2015)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvpd\nfloat\n\nVapor pressure deficit (kPA)\n\n\nfm0\nfloat\n5.43\nMinimum fuel moisture content (% dry weight)\n\n\nfm1\nfloat\n52.91\nMaximum fuel moisture content (% dry weight)\n\n\nm\nfloat\n0.64\nRate of decay\n\n\nReturns\nfloat\n\nFuel moisture content (% dry weight)\n\n\n\n\nsource\n\n\ndistribute_conductances\n\n distribute_conductances (k_plant_init:float, ri:float,\n                          frac_leaf_sym:float=0.4)\n\nCalcultate hydraulic conductances in the different portions of the plant (trunk, leaf and root) according to predetermined rules\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nk_plant_init\nfloat\n\nConductance of the plant from root to leaf\n\n\nri\nfloat\n\nRoot distribution within the soil layers.\n\n\nfrac_leaf_sym\nfloat\n0.4\nProportion of k_plant_init assigned to the leaf (apoplasm to symplasm pathway)\n\n\nReturns\ntyping.Dict\n\n\n\n\n\n\nExample: Distribute conductances\n\ndistribute_conductances(k_plant_init=1, ri=2, frac_leaf_sym=0.4)\n\ndefaultdict(list,\n            {'k_slapo_init': 5.0,\n             'k_lsym_init': 2.5,\n             'k_rsapo_init': 5.0,\n             'k_plant_init': 1})\n\n\n\nsource\n\n\n\ncompute_g_crown\n\n compute_g_crown (g_crown0:float, wind_speed:float)\n\nCalcultate g_crown\n\n\n\n\nType\nDetails\n\n\n\n\ng_crown0\nfloat\nUnknown parameter definition\n\n\nwind_speed\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nconvert_flux_from_mmolm2s_to_mm\n\n convert_flux_from_mmolm2s_to_mm (x:float, time_step:float, lai:float)\n\nConvert an instantaneous flux in mmol.m-2Leaf.s-1 to a amount in mm (L.m2soil) over a defined time period\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nThe amount of water in mm (L.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nconvert_flux_from_mm_to_mmolm2s\n\n convert_flux_from_mm_to_mmolm2s (x:float, time_step:float, lai:float)\n\nConvert flux in L.m-2soil to an instantaneous flux in mmol/m-2leaf.s-1 over a defined time period\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nThe amount of water in mm (L.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncalculate_ebound_mm_granier\n\n calculate_ebound_mm_granier (etp:float, lai:float, a:float=-0.006,\n                              b:float=0.134, c:float=0)\n\nNo description found in R source code\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\netp\nfloat\n\nUnknown parameter definition\n\n\nlai\nfloat\n\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\na\nfloat\n-0.006\nUnknown parameter definition\n\n\nb\nfloat\n0.134\nUnknown parameter definition\n\n\nc\nfloat\n0\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncalculate_ebound_granier\n\n calculate_ebound_granier (etp:float, lai:float, time_step:float)\n\nNo description found in R source code\n\n\n\n\nType\nDetails\n\n\n\n\netp\nfloat\nUnknown parameter definition\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Calculate ebound\n\ncalculate_ebound_granier(etp=1, lai=2, time_step=3)\n\n0.6275720164609054\n\n\n\nsource\n\n\n\nconvert_f_cm3_to_v_mm\n\n convert_f_cm3_to_v_mm (x:float, rock_fragment_content:float,\n                        layer_thickness:float)\n\nConvert soil parameter from from cm3.cm-3 to mm according to thickness and rock fragment content\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nSoil value to be converted (in m3.m-3)\n\n\nrock_fragment_content\nfloat\nRock fragment content of the soil layer (%)\n\n\nlayer_thickness\nfloat\nThickness of the soil layer (in m)\n\n\nReturns\nfloat\ny soil parameter in mm\n\n\n\n\nsource\n\n\ncompute_tleaf\n\n compute_tleaf (t_air:float, par:float, potential_par:float,\n                wind_speed:float, relative_humidity:int, gs:float,\n                g_cuti:float, e_inst:float, psi_leaf:float,\n                leaf_size:float=50, leaf_angle:int=45,\n                turn_off_eb:bool=False, transpiration_model:str=['jarvis',\n                'granier'])\n\nCompute leaf temperature and Vapour Pressure deficit\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nt_air\nfloat\n\nAir temperature (degC)\n\n\npar\nfloat\n\nUnknown parameter definition\n\n\npotential_par\nfloat\n\nUnknown parameter definition. Calculated using potential_par function?\n\n\nwind_speed\nfloat\n\nUnknown parameter definition (m/s)\n\n\nrelative_humidity\nint\n\nAir relative_humidity(%)\n\n\ngs\nfloat\n\nStomatal conductance\n\n\ng_cuti\nfloat\n\nleaf conductance\n\n\ne_inst\nfloat\n\nUnknown parameter definition\n\n\npsi_leaf\nfloat\n\nUnknown parameter definition\n\n\nleaf_size\nfloat\n50\nCharacteristic dimension from vegetation params in mm i.e. 1 (pine needle) to 3000 (banana leaf)\n\n\nleaf_angle\nint\n45\nLeaf angle (depuis le plan horizontal : 0-90 deg)\n\n\nturn_off_eb\nbool\nFalse\nUnknown parameter definition. Tleaf Energy balance?\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\nReturns\ntyping.Dict\n\nDictionary with parameters\n\n\n\n\nExample: Compute tleaf\n\ncompute_tleaf(\n    t_air=60,\n    par=100,\n    potential_par=1,\n    wind_speed=3,\n    relative_humidity=60,\n    gs=1,\n    g_cuti=2,\n    e_inst=3,\n    psi_leaf=4,\n    leaf_size=50,\n    leaf_angle=45,\n    turn_off_eb=False,\n    transpiration_model=\"jarvis\",\n)\n\ndefaultdict(list,\n            {'t_leaf': 60.394042704329365,\n             'g_bl': 3076.697970227172,\n             'vpd_leaf': 8.880103411681098,\n             'vpd_air': 7.978058190496631,\n             'delta_t': 0.39404270432936683})\n\n\n\nsource\n\n\n\nread_vegetation_file\n\n read_vegetation_file (file_path:pathlib.Path, modeling_options:Dict,\n                       sep:str=';')\n\nFunction for reading a data frame containing information about vegetation characteristics\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to a csv file containing parameter values i.e path/to/file_name.csv\n\n\nmodeling_options\ntyping.Dict\n\nDictionary created using the create_modeling_options function\n\n\nsep\nstr\n;\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\ntyping.Dict\n\n\n\n\n\n\nsource\n\n\nVegetationFile\n\n VegetationFile (*args, **kwargs)\n\nSchema for validating the input CSV spreadsheet with trait parameters.\nList of traits required:\n\n\n\n\nterm_in_code\n\n\nterm_in_paper\n\n\nDefinition\n\n\nUnits\n\n\n\n\nP50_VC_Leaf\n\n\nψ50,L\n\n\nWater potential causing 50% Cavitation in the vulnerability curve\n\n\nMPa\n\n\n\n\nslope_VC_Leaf\n\n\nslopeL\n\n\nSlope of rate of leaf embolism spread at ψ50,L\n\n\n%/MPa\n\n\n\n\nepsilonSym_Leaf\n\n\nεL\n\n\nModulus of elasticity of the leaf symplasm\n\n\nMPa\n\n\n\n\nPiFullTurgor_Leaf\n\n\nπ0L\n\n\nOsmotic potential at full turgor of the leaf symplasm\n\n\nMPa\n\n\n\n\napoFrac_Leaf\n\n\nαLApo\n\n\nApoplasmic Fraction in leaves/Leaf apoplasmic fraction\n\n\nUnitless\n\n\n\n\nLDMC\n\n\nLDMC\n\n\nLeaf dry matter content (dry mass over saturated mass)\n\n\nmgMS/g??\n\n\n\n\nLMA\n\n\nLMA\n\n\nLeaf mass per area\n\n\ng/m2leaf\n\n\n\n\nK\n\n\nk\n\n\nLight extinction coefficient of the vegetation layer\n\n\nunitless\n\n\n\n\nk_PlantInit\n\n\nnot found\n\n\nHydaulic conductance of the plant from soil to leaves\n\n\nmmol/MPa/s/m2leaf?\n\n\n\n\ngmin20\n\n\ngcuti20\n\n\nMinimum conductance (gmin) at the reference temperature.\n\n\nmmol/m2leaf/s-1\n\n\n\n\nTPhase_gmin\n\n\nTPhase\n\n\nTemperature for phase transition of minimum conductance/Temperature for transition phase of gcuti\n\n\ndegC\n\n\n\n\nQ10_1_gmin\n\n\nQ10a\n\n\nQ10 value for gmin = f(T) &lt;= Tphase_gmin/ Temperature dependance of gcuti when T ≤ TPhase\n\n\nunitless\n\n\n\n\nQ10_2_gmin\n\n\nQ10b\n\n\nQ10 value for gmin = f(T) &gt; Tphase_gmin/ Temperature dependance of gcuti when T &gt; TPhase\n\n\nunitless\n\n\n\n\ngmin_S\n\n\nnot found\n\n\nconductance (gmin) of the stem\n\n\nUnitless??\n\n\n\n\ncanopyStorageParam\n\n\ncws\n\n\nDepth of water that can be retained by leaves and trunks per unit of leaf area index (used to compute the canopy water storage capacity as a function of LAI\n\n\nl/m2leaf\n\n\n\n\nrootRadius\n\n\ndR\n\n\nradius of roots\n\n\nmeters\n\n\n\n\nfRootToLeaf\n\n\nRaLa\n\n\nRoot-to-leaf area ratio\n\n\nunitless\n\n\n\n\nbetaRootProfile\n\n\nβ\n\n\nparameter for the distribution of roots in the soil\n\n\nunitless\n\n\n\n\nPiFullTurgor_Stem\n\n\nπ0S\n\n\nOsmotic potential at full turgor of the stem symplasm\n\n\nMPa\n\n\n\n\nepsilonSym_Stem\n\n\nεS\n\n\nModulus of elasticity of the stem symplasm\n\n\nMPa\n\n\n\n\napoFrac_Stem\n\n\nαSApo\n\n\nStem apoplasmic fraction of the wood water volume\n\n\nUnitless\n\n\n\n\nsymFrac_Stem\n\n\nαSSym\n\n\nStem symplasmic fraction of the wood water volume\n\n\nUnitless\n\n\n\n\nvol_Stem\n\n\nVS\n\n\nVolume of tissue of the stem (includes the root, trunk and branches)\n\n\nL m−2 soil\n\n\n\n\nfTRBToLeaf\n\n\nnot found\n\n\nDefinition not found\n\n\n\n\n\n\nC_LApoInit\n\n\nCLApo\n\n\nCapacitance of the leaf apoplasm\n\n\nmmol m−2 leaf MPa−1\n\n\n\n\nC_SApoInit\n\n\nCSApo\n\n\nCapacitance of the stem apoplasm\n\n\nmmol m−2 leaf MPa−1\n\n\n\n\nP50_VC_Stem\n\n\nψ50,S\n\n\nWater potential causing 50 % loss of stem hydraulic conductance\n\n\nMPa\n\n\n\n\nslope_VC_Stem\n\n\nslopeS\n\n\nSlope of rate of stem embolism spread at ψ50,S\n\n\n% MPa−1\n\n\n\n\nk_SSymInit\n\n\nnot found\n\n\nDefinition not found\n\n\nnot found\n\n\n\n\nfoliage\n\n\nnot found\n\n\nDefinition not found\n\n\nNot applicable\n\n\n\n\nnot found\n\n\nt0\n\n\nInitial date of the forcing period for leaf phenology\n\n\nDOY\n\n\n\n\nnot found\n\n\nTD\n\n\nMinimum temperature to start cumulating temperature for budburst\n\n\n◦C\n\n\n\n\nnot found\n\n\nF∗\n\n\nAmount of forcing temperature to reach budburst\n\n\n◦C\n\n\n\n\nRAI\n\n\nRLAI\n\n\nLAI growth rate per day\n\n\nLAI d−1\n\n\n\n\nk_RSApoInit\n\n\nKR-SApo,max\n\n\nMaximum conductance from the root surface to the stem apoplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nk_SLApoInit\n\n\nKSApo−LApo,max\n\n\nMaximum conductance from trunk apoplasm to the leaf apoplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nnot found\n\n\nKSSym\n\n\nConductance from the stem apoplasm to stem symplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nk_LSymInit\n\n\nKLSym\n\n\nConductance from the leaf apoplasm to leaf symplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nnot found\n\n\nSucculence\n\n\nLeaf succulence (water content per unit of leaf area)\n\n\ng m−2 leaf\n\n\n\n\nP50_gs\n\n\nψgs50\n\n\nWater potential causing 50 % stomatal closure\n\n\nMPa\n\n\n\n\nnot found\n\n\nslopegs\n\n\nRate of decrease in stomatal conductance at ψgs,50\n\n\n% MPa−1\n\n\n\n\nnot found\n\n\ngstom_min\n\n\nMinimum stomatal conductance\n\n\nmmol m−2 leaf s −1\n\n\n\n\nnot found\n\n\ngstom_max\n\n\nMaximum stomatal conductance\n\n\nmmol m−2 leaf s −1\n\n\n\n\nnot found\n\n\nδ\n\n\nResponse of gstom to light\n\n\nunitless\n\n\n\n\nnot found\n\n\nToptim\n\n\nTemperature at maximal stomatal conductance\n\n\n◦C\n\n\n\n\nnot found\n\n\nTsens\n\n\nStomatal sensitivity to temperature\n\n\n◦C\n\n\n\n\nnot found\n\n\nθs\n\n\nSoil water content at saturation\n\n\nunitless\n\n\n\n\nnot found\n\n\nθr\n\n\nResidual soil water content\n\n\nunitless\n\n\n\n\nnot found\n\n\nα\n\n\nInverse of the air entry potential\n\n\n1/MPa\n\n\n\n\nnot found\n\n\nn\n\n\nPore size distribution index\n\n\nunitless\n\n\n\n\nnot found\n\n\nI\n\n\nShape parameter for the Van Genuchten equation\n\n\nunitless\n\n\n\n\nnot found\n\n\nksat\n\n\nSoil hydraulic conductivity at saturation\n\n\nmmol m−1 soil s −1 MPa−1\n\n\n\n\nnot found\n\n\ngsoil0\n\n\nReference soil conductance to water vapor\n\n\nmmol m−2 soil s −1\n\n\n\n\n\nExample: Read vegetation CSV file\n\nmodeling_options_dict = create_modeling_options(\n    time_step_for_evapo=2,\n    reset_swc=True,\n    avoid_water_soil_transfer=True,\n    constant_climate=False,\n    defoliation=True,\n    soil_evapo=True,\n    threshold_mortality=51,\n    etp_formulation=\"pt\",\n    rn_formulation=\"linear\",\n    comp_options_for_evapo=\"custom\",\n    stomatal_reg_formulation=\"turgor\",\n    transpiration_model=\"jarvis\",\n    numerical_scheme=\"implicit\",\n    pedo_transfer_formulation=\"vg\",\n)\n\n\nread_vegetation_file(\n    file_path=\"./sample_data/vegetation_example_wide.csv\",\n    modeling_options=modeling_options_dict,\n    sep=\",\",\n)\n\nfrac_leaf_sym' set to 0.4\n\n\n/tmp/ipykernel_37992/2639462457.py:235: UserWarning: Foliage evergreen has no params\n  warnings.warn(\"Foliage evergreen has no params\")\n\n\ndefaultdict(list,\n            {'c_lapoinit': 1e-05,\n             'c_sapoinit': 2e-05,\n             'fcrit': 450,\n             'foliage': 'evergreen',\n             'jarvis_par': 0.006,\n             'k': 0.5,\n             'k_plantinit': 0.62,\n             'k_ssyminit': 0.26,\n             'ldmc': 570,\n             'lma': 106,\n             'p12_gs': -2.07,\n             'p50_vc_leaf': -3.4,\n             'p50_vc_stem': -3.4,\n             'p88_gs': -2.62,\n             'pt_coeff': 1.14,\n             'pifullturgor_leaf': -2.1,\n             'pifullturgor_stem': -2.1,\n             'psi_close': -2,\n             'psi_start_closing': -0.5,\n             'q10_1_gmin': 1.2,\n             'q10_2_gmin': 4.8,\n             'tphase_gmin': 37.5,\n             'tbase': 3,\n             'tgs_optim': 25,\n             'tgs_sens': 17,\n             'apofrac_leaf': 0.4,\n             'apofrac_stem': 0.4,\n             'betarootprofile': 0.97,\n             'canopystorageparam': 1.5,\n             'daystart': 55,\n             'epsilonsym_leaf': 10,\n             'epsilonsym_stem': 10,\n             'froottoleaf': 1,\n             'ftrbtoleaf': 0.8,\n             'g_crown0': 45,\n             'gmin20': 4,\n             'gmin_s': 3,\n             'gs_max': 200,\n             'gs_night': 20,\n             'nbdaylai': 21,\n             'rootradius': 0.0002,\n             'slope_vc_leaf': 60,\n             'slope_vc_stem': 60,\n             'symfrac_stem': 0.2,\n             'turgor_pressure_at_gs_max': 2,\n             'vol_stem': 40,\n             'frac_leaf_sym': 0.4})"
  },
  {
    "objectID": "create_vegetation_parameters.html",
    "href": "create_vegetation_parameters.html",
    "title": "Create vegetation parameters",
    "section": "",
    "text": "source\n\ncreate_vegetation_parameters\n\n create_vegetation_parameters (stand_parameters:Dict,\n                               soil_parameters:Dict,\n                               file_path:pathlib.Path=None,\n                               list_of_parameters:List=None,\n                               modeling_options:Dict=None, sep:str=';')\n\nCreate a dictionary with the vegetation parameters to run \n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstand_parameters\ntyping.Dict\n\nDictionary created using the create_stand_parameters function\n\n\nsoil_parameters\ntyping.Dict\n\nDictionary created using the create_soil_parameters function\n\n\nfile_path\nPath\nNone\nPath to a csv file trait parameters. Check read_vegetation_file for more information i.e path/to/parameter_values.csv\n\n\nlist_of_parameters\ntyping.List\nNone\nA list containing the necessary input parameters instead of reading them in file. Will only be used if ‘file_path’ arguement is not provided\n\n\nmodeling_options\ntyping.Dict\nNone\nDictionary created using the create_modeling_options function\n\n\nsep\nstr\n;\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\ntyping.Dict\n\nDictionary containing parameters to run the model\n\n\n\nList of traits required:\n\n\n\n\nterm_in_code\n\n\nterm_in_paper\n\n\nDefinition\n\n\nUnits\n\n\n\n\nP50_VC_Leaf\n\n\nψ50,L\n\n\nWater potential causing 50% Cavitation in the vulnerability curve\n\n\nMPa\n\n\n\n\nslope_VC_Leaf\n\n\nslopeL\n\n\nSlope of rate of leaf embolism spread at ψ50,L\n\n\n%/MPa\n\n\n\n\nepsilonSym_Leaf\n\n\nεL\n\n\nModulus of elasticity of the leaf symplasm\n\n\nMPa\n\n\n\n\nPiFullTurgor_Leaf\n\n\nπ0L\n\n\nOsmotic potential at full turgor of the leaf symplasm\n\n\nMPa\n\n\n\n\napoFrac_Leaf\n\n\nαLApo\n\n\nApoplasmic Fraction in leaves/Leaf apoplasmic fraction\n\n\nUnitless\n\n\n\n\nLDMC\n\n\nLDMC\n\n\nLeaf dry matter content (dry mass over saturated mass)\n\n\nmgMS/g??\n\n\n\n\nLMA\n\n\nLMA\n\n\nLeaf mass per area\n\n\ng/m2leaf\n\n\n\n\nK\n\n\nk\n\n\nLight extinction coefficient of the vegetation layer\n\n\nunitless\n\n\n\n\nk_PlantInit\n\n\nnot found\n\n\nHydaulic conductance of the plant from soil to leaves\n\n\nmmol/MPa/s/m2leaf?\n\n\n\n\ngmin20\n\n\ngcuti20\n\n\nMinimum conductance (gmin) at the reference temperature.\n\n\nmmol/m2leaf/s-1\n\n\n\n\nTPhase_gmin\n\n\nTPhase\n\n\nTemperature for phase transition of minimum conductance/Temperature for transition phase of gcuti\n\n\ndegC\n\n\n\n\nQ10_1_gmin\n\n\nQ10a\n\n\nQ10 value for gmin = f(T) &lt;= Tphase_gmin/ Temperature dependance of gcuti when T ≤ TPhase\n\n\nunitless\n\n\n\n\nQ10_2_gmin\n\n\nQ10b\n\n\nQ10 value for gmin = f(T) &gt; Tphase_gmin/ Temperature dependance of gcuti when T &gt; TPhase\n\n\nunitless\n\n\n\n\ngmin_S\n\n\nnot found\n\n\nconductance (gmin) of the stem\n\n\nUnitless??\n\n\n\n\ncanopyStorageParam\n\n\ncws\n\n\nDepth of water that can be retained by leaves and trunks per unit of leaf area index (used to compute the canopy water storage capacity as a function of LAI\n\n\nl/m2leaf\n\n\n\n\nrootRadius\n\n\ndR\n\n\nradius of roots\n\n\nmeters\n\n\n\n\nfRootToLeaf\n\n\nRaLa\n\n\nRoot-to-leaf area ratio\n\n\nunitless\n\n\n\n\nbetaRootProfile\n\n\nβ\n\n\nparameter for the distribution of roots in the soil\n\n\nunitless\n\n\n\n\nPiFullTurgor_Stem\n\n\nπ0S\n\n\nOsmotic potential at full turgor of the stem symplasm\n\n\nMPa\n\n\n\n\nepsilonSym_Stem\n\n\nεS\n\n\nModulus of elasticity of the stem symplasm\n\n\nMPa\n\n\n\n\napoFrac_Stem\n\n\nαSApo\n\n\nStem apoplasmic fraction of the wood water volume\n\n\nUnitless\n\n\n\n\nsymFrac_Stem\n\n\nαSSym\n\n\nStem symplasmic fraction of the wood water volume\n\n\nUnitless\n\n\n\n\nvol_Stem\n\n\nVS\n\n\nVolume of tissue of the stem (includes the root, trunk and branches)\n\n\nL m−2 soil\n\n\n\n\nfTRBToLeaf\n\n\nnot found\n\n\nDefinition not found\n\n\n\n\n\n\nC_LApoInit\n\n\nCLApo\n\n\nCapacitance of the leaf apoplasm\n\n\nmmol m−2 leaf MPa−1\n\n\n\n\nC_SApoInit\n\n\nCSApo\n\n\nCapacitance of the stem apoplasm\n\n\nmmol m−2 leaf MPa−1\n\n\n\n\nP50_VC_Stem\n\n\nψ50,S\n\n\nWater potential causing 50 % loss of stem hydraulic conductance\n\n\nMPa\n\n\n\n\nslope_VC_Stem\n\n\nslopeS\n\n\nSlope of rate of stem embolism spread at ψ50,S\n\n\n% MPa−1\n\n\n\n\nk_SSymInit\n\n\nnot found\n\n\nDefinition not found\n\n\nnot found\n\n\n\n\nfoliage\n\n\nnot found\n\n\nDefinition not found\n\n\nNot applicable\n\n\n\n\nnot found\n\n\nt0\n\n\nInitial date of the forcing period for leaf phenology\n\n\nDOY\n\n\n\n\nnot found\n\n\nTD\n\n\nMinimum temperature to start cumulating temperature for budburst\n\n\n◦C\n\n\n\n\nnot found\n\n\nF∗\n\n\nAmount of forcing temperature to reach budburst\n\n\n◦C\n\n\n\n\nRAI\n\n\nRLAI\n\n\nLAI growth rate per day\n\n\nLAI d−1\n\n\n\n\nk_RSApoInit\n\n\nKR-SApo,max\n\n\nMaximum conductance from the root surface to the stem apoplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nk_SLApoInit\n\n\nKSApo−LApo,max\n\n\nMaximum conductance from trunk apoplasm to the leaf apoplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nnot found\n\n\nKSSym\n\n\nConductance from the stem apoplasm to stem symplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nk_LSymInit\n\n\nKLSym\n\n\nConductance from the leaf apoplasm to leaf symplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nnot found\n\n\nSucculence\n\n\nLeaf succulence (water content per unit of leaf area)\n\n\ng m−2 leaf\n\n\n\n\nP50_gs\n\n\nψgs50\n\n\nWater potential causing 50 % stomatal closure\n\n\nMPa\n\n\n\n\nnot found\n\n\nslopegs\n\n\nRate of decrease in stomatal conductance at ψgs,50\n\n\n% MPa−1\n\n\n\n\nnot found\n\n\ngstom_min\n\n\nMinimum stomatal conductance\n\n\nmmol m−2 leaf s −1\n\n\n\n\nnot found\n\n\ngstom_max\n\n\nMaximum stomatal conductance\n\n\nmmol m−2 leaf s −1\n\n\n\n\nnot found\n\n\nδ\n\n\nResponse of gstom to light\n\n\nunitless\n\n\n\n\nnot found\n\n\nToptim\n\n\nTemperature at maximal stomatal conductance\n\n\n◦C\n\n\n\n\nnot found\n\n\nTsens\n\n\nStomatal sensitivity to temperature\n\n\n◦C\n\n\n\n\nnot found\n\n\nθs\n\n\nSoil water content at saturation\n\n\nunitless\n\n\n\n\nnot found\n\n\nθr\n\n\nResidual soil water content\n\n\nunitless\n\n\n\n\nnot found\n\n\nα\n\n\nInverse of the air entry potential\n\n\n1/MPa\n\n\n\n\nnot found\n\n\nn\n\n\nPore size distribution index\n\n\nunitless\n\n\n\n\nnot found\n\n\nI\n\n\nShape parameter for the Van Genuchten equation\n\n\nunitless\n\n\n\n\nnot found\n\n\nksat\n\n\nSoil hydraulic conductivity at saturation\n\n\nmmol m−1 soil s −1 MPa−1\n\n\n\n\nnot found\n\n\ngsoil0\n\n\nReference soil conductance to water vapor\n\n\nmmol m−2 soil s −1\n\n\n\n\n\nExample: Create vegetation parameters dictionary\n\nmodeling_options_dict = create_modeling_options(\n    time_step_for_evapo=2,\n    reset_swc=True,\n    avoid_water_soil_transfer=True,\n    constant_climate=False,\n    defoliation=True,\n    soil_evapo=True,\n    threshold_mortality=51,\n    etp_formulation=\"pt\",\n    rn_formulation=\"linear\",\n    comp_options_for_evapo=\"custom\",\n    stomatal_reg_formulation=\"sigmoid\",\n    transpiration_model=\"jarvis\",\n    numerical_scheme=\"implicit\",\n    pedo_transfer_formulation=\"campbell\",\n)\nmodeling_options_dict\n\ndefaultdict(list,\n            {'constant_climate': False,\n             'etp_formulation': 'pt',\n             'rn_formulation': 'linear',\n             'pedo_transfer_formulation': 'campbell',\n             'time_step_for_evapo': 2,\n             'time': array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22]),\n             'reset_swc': True,\n             'avoid_water_soil_transfer': True,\n             'comp_options': defaultdict(list,\n                         {'numerical_scheme': 'implicit',\n                          'nsmalltimesteps': 12.0,\n                          'lsym': 1,\n                          'ssym': 1,\n                          'clapo': 1,\n                          'ctapo': 1,\n                          'eord': 1,\n                          'lcav': 1,\n                          'scav': 1}),\n             'stomatal_reg_formulation': 'sigmoid',\n             'soil_evapo': True,\n             'defoliation': True,\n             'threshold_mortality': 51,\n             'transpiration_model': 'jarvis',\n             'print_prog': True})\n\n\n\nstand_params = create_stand_parameters(\n    file_path=\"./sample_data/stand_example.csv\",\n    lai_max=None,\n    latitude=None,\n    longitude=None,\n    sep=\";\",\n)\nstand_params\n\ndefaultdict(list, {'lai_max': 4.5, 'latitude': 48.73, 'longitude': 6.23})\n\n\n\nsoil_params = create_soil_parameters(\n    file_path=\"./sample_data/soil_example.csv\",\n    modeling_options=modeling_options_dict,\n    default_soil=False,\n    offset_psoil=1,\n    psoil_at_field_capacity=-1,\n)\nsoil_params\n\nThere is an offset on Psoil of 1 MPa\nPsoil at field capacity = -0.001 MPa\nYou are using campbell pedotransfer formulation\nAvailable water capacity Wilting: 273.74477742718403 mm\nAvailable water capacity Residual: 307.81195119276424 mm\nCan soil_params[\"v_soil_storage_capacity\"] be negative?? Ask\n\n\ndefaultdict(list,\n            {'offset_psoil': 1,\n             'psoil_at_field_capacity': -0.001,\n             'pedo_transfer_formulation': 'campbell',\n             'soil_depths': array([0.2, 1. , 4. ]),\n             'layer_thickness': array([0.2, 0.8, 3. ]),\n             'g_soil_0': 30.0,\n             'rock_fragment_content': array([75., 82., 94.]),\n             'b_campbell': array([-4., -4., -4.]),\n             'psie': array([-0.025, -0.025, -0.025]),\n             'ksat_campbell': 1.69,\n             'saturation_capacity_campbell': array([0.39, 0.39, 0.39]),\n             'wilting_point': array([0.1401286, 0.1401286, 0.1401286]),\n             'field_capacity': array([0.87206651, 0.87206651, 0.87206651]),\n             'residual_capacity_campbell': array([0.0490399, 0.0490399, 0.0490399]),\n             'v_field_capacity': array([ 43.60332556, 125.57757762, 156.97197202]),\n             'v_saturation_capacity_campbell': array([19.5 , 56.16, 70.2 ]),\n             'v_residual_capacity_campbell': array([2.45199519, 7.06174614, 8.82718268]),\n             'v_wilting_point': array([ 7.00643018, 20.17851893, 25.22314866]),\n             'v_saturation_capacity': array([19.5 , 56.16, 70.2 ]),\n             'v_soil_storage_capacity_wilt_campbell': 273.74477742718403,\n             'v_soil_storage_capacity_res_campbell': 307.81195119276424,\n             'v_soil_storage_capacity': 273.74477742718403})\n\n\n\ncreate_vegetation_parameters(\n    file_path=\"./sample_data/vegetation_example_wide.csv\",\n    list_of_parameters=None,\n    soil_parameters=soil_params,\n    stand_parameters=stand_params,\n    modeling_options=modeling_options_dict,\n    sep=\",\",\n)\n\nfrac_leaf_sym' set to 0.4\nAvailable water capacity @Tlp (Campbell):280.7301527422195 mm\nAvailable water capacity @P50 (Campbell):283.4407203700769 mm\n\n\n/workspaces/sureau_ecos_py/sureau_ecos_py/plant_utils.py:894: UserWarning: Foliage evergreen has no params\n  warnings.warn(\"Foliage evergreen has no params\")\n/tmp/ipykernel_26798/1456394742.py:82: UserWarning: Make sure that depth from soil_parameters is in meters\n  warnings.warn(\"Make sure that depth from soil_parameters is in meters\")\n\n\ndefaultdict(list,\n            {'c_lapoinit': 1e-05,\n             'c_sapoinit': 2e-05,\n             'fcrit': 450,\n             'foliage': 'evergreen',\n             'jarvis_par': 0.006,\n             'k': 0.5,\n             'k_plantinit': 0.62,\n             'k_ssyminit': 0.26,\n             'ldmc': 570,\n             'lma': 106,\n             'p12_gs': -2.07,\n             'p50_vc_leaf': -3.4,\n             'p50_vc_stem': -3.4,\n             'p88_gs': -2.62,\n             'pt_coeff': 1.14,\n             'pifullturgor_leaf': -2.1,\n             'pifullturgor_stem': -2.1,\n             'psi_close': -2,\n             'psi_start_closing': -0.5,\n             'q10_1_gmin': 1.2,\n             'q10_2_gmin': 4.8,\n             'tphase_gmin': 37.5,\n             'tbase': 3,\n             'tgs_optim': 25,\n             'tgs_sens': 17,\n             'apofrac_leaf': 0.4,\n             'apofrac_stem': 0.4,\n             'betarootprofile': 0.97,\n             'canopystorageparam': 1.5,\n             'daystart': 55,\n             'epsilonsym_leaf': 10,\n             'epsilonsym_stem': 10,\n             'froottoleaf': 1,\n             'ftrbtoleaf': 0.8,\n             'g_crown0': 45,\n             'gmin20': 4,\n             'gmin_s': 3,\n             'gs_max': 200,\n             'gs_night': 20,\n             'nbdaylai': 21,\n             'rootradius': 0.0002,\n             'slope_vc_leaf': 60,\n             'slope_vc_stem': 60,\n             'symfrac_stem': 0.2,\n             'turgor_pressure_at_gs_max': 2,\n             'vol_stem': 40,\n             'frac_leaf_sym': 0.4,\n             'p50_gs': -2.3449999999999998,\n             'slope_gs': 181.81818181818173,\n             'lai_max': 4.5,\n             'root_distribution': array([0.45620566, 0.49624184, 0.04755251]),\n             'taw_at_tlp': 280.7301527422195,\n             'taw_at_p50': 283.4407203700769,\n             'la': array([1633.66617127, 1777.03517271,  170.28487559]),\n             'lv': array([32673.32342536, 12340.52203273,   946.02708659]),\n             'k_slapo_init': 3.1,\n             'k_rsapo_init': array([0.70711877, 0.76917484, 0.07370639]),\n             'k_lsym_init': 1.5499999999999998,\n             'k_plant_init': 0.62})"
  },
  {
    "objectID": "create_soil_parameters.html",
    "href": "create_soil_parameters.html",
    "title": "Create soil parameters",
    "section": "",
    "text": "source\n\ncreate_soil_parameters\n\n create_soil_parameters (file_path:pathlib.Path,\n                         modeling_options:Dict=None,\n                         list_of_parameters:List=None,\n                         default_soil:bool=False, offset_psoil:int=0,\n                         psoil_at_field_capacity:int=-33)\n\nCreate a Dictionary with soil parameters to run SureauR\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to a csv file containing parameter values i.e path/to/parameter_values.csv\n\n\nmodeling_options\ntyping.Dict\nNone\nDictionary created using the create_modeling_options function\n\n\nlist_of_parameters\ntyping.List\nNone\nA list containing the necessary input parameters instead of reading them in file. Will only be used if ‘file_path’ arguement is not provided\n\n\ndefault_soil\nbool\nFalse\nA logical value indicating whether a default soil should be used to run tests\n\n\noffset_psoil\nint\n0\nA numerical value indicating the offset in soil water potential (MPa)\n\n\npsoil_at_field_capacity\nint\n-33\nUnknown parameter definition\n\n\nReturns\ntyping.Dict\n\nDictionary containing parameters\n\n\n\n\nExample: Create soil parameters for campbell pedotransfer function\n\nmodeling_options_dict_campbell = create_modeling_options(\n    time_step_for_evapo=2,\n    reset_swc=True,\n    avoid_water_soil_transfer=True,\n    constant_climate=False,\n    defoliation=True,\n    soil_evapo=True,\n    threshold_mortality=51,\n    etp_formulation=\"pt\",\n    rn_formulation=\"linear\",\n    comp_options_for_evapo=\"custom\",\n    stomatal_reg_formulation=\"turgor\",\n    transpiration_model=\"jarvis\",\n    numerical_scheme=\"implicit\",\n    pedo_transfer_formulation=\"campbell\",\n)\n\n\ncreate_soil_parameters(\n    file_path=\"./sample_data/soil_example.csv\",\n    modeling_options=modeling_options_dict_campbell,\n    default_soil=False,\n    offset_psoil=1,\n    psoil_at_field_capacity=-1,\n)\n\nThere is an offset on Psoil of 1 MPa\nPsoil at field capacity = -0.001 MPa\nYou are using campbell pedotransfer formulation\nAvailable water capacity Wilting: 273.74477742718403 mm\nAvailable water capacity Residual: 307.81195119276424 mm\nCan soil_params[\"v_soil_storage_capacity\"] be negative?? Ask\n\n\ndefaultdict(list,\n            {'offset_psoil': 1,\n             'psoil_at_field_capacity': -0.001,\n             'pedo_transfer_formulation': 'campbell',\n             'soil_depths': array([0.2, 1. , 4. ]),\n             'layer_thickness': array([0.2, 0.8, 3. ]),\n             'g_soil_0': 30.0,\n             'rock_fragment_content': array([75., 82., 94.]),\n             'b_campbell': array([-4., -4., -4.]),\n             'psie': array([-0.025, -0.025, -0.025]),\n             'ksat_campbell': 1.69,\n             'saturation_capacity_campbell': array([0.39, 0.39, 0.39]),\n             'wilting_point': array([0.1401286, 0.1401286, 0.1401286]),\n             'field_capacity': array([0.87206651, 0.87206651, 0.87206651]),\n             'residual_capacity_campbell': array([0.0490399, 0.0490399, 0.0490399]),\n             'v_field_capacity': array([ 43.60332556, 125.57757762, 156.97197202]),\n             'v_saturation_capacity_campbell': array([19.5 , 56.16, 70.2 ]),\n             'v_residual_capacity_campbell': array([2.45199519, 7.06174614, 8.82718268]),\n             'v_wilting_point': array([ 7.00643018, 20.17851893, 25.22314866]),\n             'v_saturation_capacity': array([19.5 , 56.16, 70.2 ]),\n             'v_soil_storage_capacity_wilt_campbell': 273.74477742718403,\n             'v_soil_storage_capacity_res_campbell': 307.81195119276424,\n             'v_soil_storage_capacity': 273.74477742718403})\n\n\n\n\nExample: Create soil parameters for vg pedotransfer function\n\nmodeling_options_dict_vg = create_modeling_options(\n    time_step_for_evapo=2,\n    reset_swc=True,\n    avoid_water_soil_transfer=True,\n    constant_climate=False,\n    defoliation=True,\n    soil_evapo=True,\n    threshold_mortality=51,\n    etp_formulation=\"pt\",\n    rn_formulation=\"linear\",\n    comp_options_for_evapo=\"custom\",\n    stomatal_reg_formulation=\"turgor\",\n    transpiration_model=\"jarvis\",\n    numerical_scheme=\"implicit\",\n    pedo_transfer_formulation=\"vg\",\n)\n\n\ncreate_soil_parameters(\n    file_path=\"./sample_data/soil_example.csv\",\n    modeling_options=modeling_options_dict_vg,\n    default_soil=False,\n    offset_psoil=1,\n    psoil_at_field_capacity=1,\n)\n\nThere is an offset on Psoil of 1 MPa\nPsoil at field capacity = 0.001 MPa\nYou are using vg pedotransfer formulation\nAvailable water capacity Wilting: 25.65230545095943 mm\nAvailable water capacity Residual: 135.33945663142987 mm\nCan soil_params[\"v_soil_storage_capacity\"] be negative?? Ask\n\n\ndefaultdict(list,\n            {'offset_psoil': 1,\n             'psoil_at_field_capacity': 0.001,\n             'pedo_transfer_formulation': 'vg',\n             'soil_depths': array([0.2, 1. , 4. ]),\n             'layer_thickness': array([0.2, 0.8, 3. ]),\n             'g_soil_0': 30.0,\n             'rock_fragment_content': array([75., 82., 94.]),\n             'alpha_vg': array([0.0005, 0.0005, 0.0005]),\n             'n_vg': array([1.55, 1.55, 1.55]),\n             'i_vg': array([0.5, 0.5, 0.5]),\n             'ksat_vg': array([10., 10., 10.]),\n             'saturation_capacity_vg': array([1., 1., 1.]),\n             'residual_capacity_vg': array([0.098, 0.098, 0.098]),\n             'wilting_point': 0.39128115288895826,\n             'field_capacity': 0.45987020489687114,\n             'v_field_capacity': array([22.99351024, 66.22130951, 82.77663688]),\n             'v_saturation_capacity_vg': array([ 50., 144., 180.]),\n             'v_residual_capacity_vg': array([ 4.9  , 14.112, 17.64 ]),\n             'v_wilting_point': array([19.56405764, 56.34448602, 70.43060752]),\n             'v_saturation_capacity': array([ 50., 144., 180.]),\n             'v_soil_storage_capacity_wilt': 25.65230545095943,\n             'v_soil_storage_capacity_res': 135.33945663142987,\n             'v_soil_storage_capacity': 25.65230545095943})"
  },
  {
    "objectID": "climate_utils.html",
    "href": "climate_utils.html",
    "title": "Climate utils functions",
    "section": "",
    "text": "source\n\ncompute_vpd_from_t_rh\n\n compute_vpd_from_t_rh (relative_humidity:float, temperature:float,\n                        air_pressure:float=101325)\n\nCompute vapor pressure deficit (VPD) from air relative humidity and air temperature\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrelative_humidity\nfloat\n\nAir relative_humidity (%)\n\n\ntemperature\nfloat\n\nAir temperature (degrees Celsius)\n\n\nair_pressure\nfloat\n101325\nUnknown parameter definition Air pressure, used?\n\n\nReturns\nfloat\n\n\n\n\n\n\nExample: Compute VPD\n\ncompute_vpd_from_t_rh(relative_humidity=80, temperature=25)\n\n0.6339533962744358\n\n\n\nsource\n\n\n\ncompute_etp_pt\n\n compute_etp_pt (tmoy:float, net_radiation:float, pt_coeff:float=1.26,\n                 g:float=0)\n\nCalcule Potential evapotranspiration (mm) PET using Pristeley Taylor Formulation\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntmoy\nfloat\n\nMean temperature over the considered time step (degrees Celsius)\n\n\nnet_radiation\nfloat\n\nCumulative Net radiation over the considered time sep (MJ.m2)\n\n\npt_coeff\nfloat\n1.26\nAn empirical constant accounting for the vapor pressure deficit and resistance values Typically, α is 1.26 for open bodies of water, but has a wide range of values from less than 1 (humid conditions) to almost 2 (arid conditions).\n\n\ng\nfloat\n0\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nExample: Compute ETP\n\ncompute_etp_pt(tmoy=80, net_radiation=25)\n\n12.429220134837708\n\n\n\ncompute_etp_pt(tmoy=20, net_radiation=1, pt_coeff=1.14)\n\n0.3186733971169735\n\n\n\nsource\n\n\n\ncompute_etp_pm\n\n compute_etp_pm (tmoy:float, net_radiation:float, u:float, vpd:float,\n                 g:float=0)\n\nCompute reference ETP from Penmman formulation\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntmoy\nfloat\n\nMean temperature over the considered time step (degrees Celsius)\n\n\nnet_radiation\nfloat\n\nCumulative Net radiation over the considered time sep (MJ.m2)\n\n\nu\nfloat\n\nWind speed (m.s-1)\n\n\nvpd\nfloat\n\nVapor pressure deficit (kpa)\n\n\ng\nfloat\n0\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncalculate_radiation_diurnal_pattern\n\n calculate_radiation_diurnal_pattern (time_of_the_day:List[int],\n                                      day_length:int)\n\nCalculated diurnal pattern of temperature assuming a sinusoidal pattern with T = tmin at sunrise and T = (tmin + tmax)/2 at sunset. From sunset to sunrise follows a linear trend\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntime_of_the_day\ntyping.List[int]\n\n\n\nday_length\nint\nvalue indicating the duration of the day (in seconds)\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Calculate radiation diurnal pattern\n\ncalculate_radiation_diurnal_pattern(time_of_the_day=1, day_length=40)\n\n0.0036562495459173377\n\n\n\nsource\n\n\n\ncalculate_temperature_diurnal_pattern\n\n calculate_temperature_diurnal_pattern (time_of_the_day:List[int],\n                                        day_length:int, tmin:float,\n                                        tmax:float, tmin_prev:float,\n                                        tmax_prev:float, tmin_next:float)\n\nCalculated diurnal pattern of temperature assuming a sinusoidal pattern with T = tmin at sunrise and T = (tmin+tmax)/2 at sunset. From sunset to sunrise follows a linear trend\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntime_of_the_day\ntyping.List[int]\n\n\n\nday_length\nint\nvalue indicating the duration of the day (in seconds)\n\n\ntmin\nfloat\nUnknown parameter definition\n\n\ntmax\nfloat\nUnknown parameter definition\n\n\ntmin_prev\nfloat\nUnknown parameter definition\n\n\ntmax_prev\nfloat\nUnknown parameter definition\n\n\ntmin_next\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncalculate_rh_diurnal_pattern\n\n calculate_rh_diurnal_pattern (temperature:float, rhmin:float,\n                               rhmax:float, tmin:float, tmax:float)\n\nCalculate diurnal pattern of relative humidity from temperature\n\n\n\n\nType\nDetails\n\n\n\n\ntemperature\nfloat\nUnknown parameter definition\n\n\nrhmin\nfloat\nUnknown parameter definition\n\n\nrhmax\nfloat\nUnknown parameter definition\n\n\ntmin\nfloat\nUnknown parameter definition\n\n\ntmax\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nppfd_umol_to_rg_watt\n\n ppfd_umol_to_rg_watt (ppfd:float, j_to_mol:float=4.6, frac_par:float=0.5)\n\nConvert ppfd (umol) to rg (watt)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nppfd\nfloat\n\nPhotosynthetic photon flux density (umol.m-2.s-1)\n\n\nj_to_mol\nfloat\n4.6\nConversion factor\n\n\nfrac_par\nfloat\n0.5\nFunction of solar rdiation that is photosynthetically active radiation (PAR)\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\nrg_watt_to_ppfd_umol\n\n rg_watt_to_ppfd_umol (rg:float, j_to_mol:float=4.6, frac_par:float=0.5)\n\nConvert rg (watt) to ppfd (umol)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrg\nfloat\n\nGlobal radiation (W/m2)\n\n\nj_to_mol\nfloat\n4.6\nConversion factor\n\n\nfrac_par\nfloat\n0.5\nFunction of solar rdiation that is photosynthetically active radiation (PAR)\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\nrg_convertions\n\n rg_convertions (rg_watts:float=None, rg_mj:float=None, nhours:float=None)\n\nConvert instantaneous radiation in watt to dialy cumulative radiation in MJ (MJ.day-1)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrg_watts\nfloat\nNone\ninstantaneous radiation (watt)\n\n\nrg_mj\nfloat\nNone\ninstantaneous radiation (in Mega Jule?)\n\n\nnhours\nfloat\nNone\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nExample: RG conversions\n\nrg_convertions(rg_watts=1)\n\nConversion of rg from watts to Mega Jules\n\n\n0.0864\n\n\n\nrg_convertions(rg_mj=1)\n\nConversion of rg from Mega Jules to Watts\n\n\n11.574074074074073\n\n\n\nrg_convertions(rg_mj=1, nhours=100)\n\nConversion of rg from Mega Jules to Watts/hour\n\n\n2.7777777777777777\n\n\n\nrg_convertions(rg_watts=1, rg_mj=1, nhours=1)\n\nSelect one conversion rg_mj or rg_watts\n\n\n\nsource\n\n\n\ndeclination\n\n declination (doy:int)\n\nCalculate declination of sun (radians ? ) for a given julian day (DOY)\n\n\n\n\nType\nDetails\n\n\n\n\ndoy\nint\njulian day (day of the year)\n\n\n\n\ndef potential_par(time_of_day: float, lat: float, doy: float):\n    \"Determine potential for a given place and date /used to determine cloud cover return potential par in W.m2\"\n\n    # Constants -----------------------------------------------------------------\n    diffuse_fraction = 0.1\n    solar_constant = 2084\n    attenuation_coef = -0.174353387144778\n\n    decl = declination(doy)\n\n    pn = -cos(lat * pi / 180)\n    pz = sin(lat * pi / 180)\n    h_rad = (time_of_day - 6) * 3.1416 / 12\n    se = cos(h_rad) * cos(decl)\n    sn = -pz * sin(h_rad) * cos(decl) - pn * sin(decl)\n    sz = -pn * sin(h_rad) * cos(decl) + pz * sin(decl)\n    alt = atan(sz / ((se * se + sn * sn) ^ 0.5))\n    azi = 3.1416 + atan(se / sn)\n\n    # azi[sn &gt; 0] = azi[sn &gt; 0] + 3.1416 I dont understand the meaning of this\n    if sn &gt; 0:\n        azi = azi + pi\n\n    pfd = solar_constant * exp(attenuation_coef / sin(alt))\n\n    # pfd[alt &lt; 0] = 0 I dont understand the meaning of this\n    dpfd = diffuse_fraction * pfd\n    # dpfd[alt&lt;0] = 0 I dont understand the meaning of this\n\n    return dpfd + pfd * sin(alt)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sureau_ecos_py",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "sureau_ecos_py",
    "section": "Install",
    "text": "Install\nCode\npip install sureau_ecos_py"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "sureau_ecos_py",
    "section": "How to use",
    "text": "How to use\n\n\n\n\n    %%{init:{'themeVariables': {'primaryBorderColor': '#00758f'}}}%%\n    flowchart TD;\n\n        compute_theta_at_given_p_soil_camp--&gt;create_vegetation_parameters;\n        create_modeling_options--&gt;create_vegetation_parameters;\n        convert_f_to_v--&gt;create_soil_paramters;\n        convert_f_to_v--&gt;create_vegetation_parameters;\n        read_vegetation_file--&gt;create_vegetation_parameters;\n\n        \n        create_soil_paramters--&gt;create_vegetation_parameters;\n        \n        create_modeling_options--&gt;create_climate_data;\n        create_simulation_parameters--&gt;create_climate_data;\n        \n\n        create_modeling_options--&gt;create_soil_paramters;\n        read_soil_file--&gt;create_soil_paramters;\n        compute_theta_at_given_p_soil_camp--&gt;create_soil_paramters;\n        compute_theta_at_given_psoil--&gt;create_soil_paramters;\n        compute_theta_at_given_psoil--&gt;create_vegetation_parameters;\n        \n        \n\n        \n\n        %% Blue color boxes -----------------------------------------------------\n\n        %%style create_climate_data fill:#00758f\n        %%style create_modeling_options fill:#00758f\n        %%style create_simulation_parameters fill:#00758f, lineColor:#00758f\n        %%style create_soil_paramters fill:#00758f\n\n\n        %% Red color boxes ------------------------------------------------------\n        %%style compute_theta_at_given_psoil fill:#880808"
  }
]