# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_8_compute_theta_at_given_p_soil_camp.ipynb.

# %% auto 0
__all__ = ['compute_theta_at_given_p_soil_camp']

# %% ../nbs/09_8_compute_theta_at_given_p_soil_camp.ipynb 3
import numpy as np

# %% ../nbs/09_8_compute_theta_at_given_p_soil_camp.ipynb 4
def compute_theta_at_given_p_soil_camp(
    theta_sat: float, # Unknown parameter definition
    psi_target: float, # Unknown parameter definition
    psie: float, # Unknown parameter definition
    b_camp: float # Unknown parameter definition
) -> float:

    # Assert that values are negative.
    # Using np.testing instead of assert because parameters can be np.arrays OR
    # single values (i.e. 1). assert only works when params are always one
    # type

    np.testing.assert_array_less(np.array(psie), 0,
                                 err_msg='\nError: psie values must be negative\n')

    np.testing.assert_array_less(np.array(b_camp), 0,
                                 err_msg='\nError: b_camp values must be negative\n')

    np.testing.assert_array_less(np.array(psi_target), 0,
                                 err_msg='\nError: psi_target values must be negative\n')


    return theta_sat * (psi_target / psie) ** (1 / b_camp)

