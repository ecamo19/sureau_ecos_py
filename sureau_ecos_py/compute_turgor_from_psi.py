# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_3_compute_turgor_from_psi.ipynb.

# %% auto 0
__all__ = ['compute_turgor_from_psi']

# %% ../nbs/10_3_compute_turgor_from_psi.ipynb 3
#from sureau_ecos_py.create_modeling_options import create_modeling_options
import numpy as np
from typing import List

# %% ../nbs/10_3_compute_turgor_from_psi.ipynb 4
def compute_turgor_from_psi(pi_ft:float, # Osmotic potential at full turgor (MPa)
                            e_symp:float, # Modulus of elastoicoty of the Symplasm (MPa/%)
                            psi:List # List of Water potential of the organ (MPa)
                            ) -> np.array:

    "Computes Turgor pressure from Pressure-Volume curves parameters and water potential"

    # Make sure psi is a list
    assert isinstance(
        psi, List
    ), f"psi must be a List with float values (i.e [1] or [1,2,..]) not a {type(psi)}"

    # Compute symplasm relative water deficit (rwd) from each psi value

    # Generates an array of length psi
    rwd_1 = (-1 * (np.array(psi) + pi_ft - e_symp) - np.sqrt((np.array(psi) + pi_ft - e_symp)**2 + 4 * (np.array(psi) * e_symp))) / (2 * e_symp)

    # Generates an array of length psi
    rwd_2 = (1 - pi_ft / np.array(psi))


    # Create empty array for storing values
    rs_array = np.zeros(0, dtype=float)

    for each_rwd_1, each_rwd_2 in zip(rwd_1,rwd_2):

        # Compare relative_water_deficit_1 and relative_water_deficit_2 and store
        # the largest one into array
        rs_array = np.append(rs_array, max(each_rwd_1, each_rwd_2))

    # Calculate turgor
    turgor_array = -pi_ft - e_symp * rs_array

    # Replace negative values inside the turgor array with 0's
    turgor_array[(turgor_array < 0)] = 0

    return turgor_array
