# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_calculate_temperature_diurnal_pattern.ipynb.

# %% auto 0
__all__ = ['calculate_temperature_diurnal_pattern']

# %% ../nbs/04_calculate_temperature_diurnal_pattern.ipynb 3
from typing import List
from math import pi, cos

# %% ../nbs/04_calculate_temperature_diurnal_pattern.ipynb 4
def calculate_temperature_diurnal_pattern(
    time_of_the_day: List[
        int
    ],  # a numeric value of vector indicating the time of the day (in seconds from sunrise)
    day_length: int,  # value indicating the duration of the day (in seconds)
    tmin: float,  # No info in source code
    tmax: float,  # No info in source code
    tmin_prev: float,  # No info in source code
    tmax_prev: float,  # No info in source code
    tmin_next: float,  # No info in source code
):
    "Calculated diurnal pattern of temperature assuming a sinusoidal pattern with T = tmin at sunrise and T = (tmin+tmax)/2 at sunset. From sunset to sunrise follows a linear trend"

    # calculate_temperature_diurnal_pattern -------------------------------------

    if time_of_the_day < 0.0 or time_of_the_day > day_length:
        tfin = 86400.0 - day_length

        if time_of_the_day < 0.0:
            time_of_the_day = time_of_the_day + 86400.0 - day_length

            # Return Temp
            return 0.5 * (tmax_prev + tmin_prev) * (
                1.0 - (time_of_the_day / tfin)
            ) + tmin * (time_of_the_day / tfin)

        else:
            time_of_the_day = time_of_the_day - day_length

            # Return Temp
            return 0.5 * (tmax + tmin) * (
                1.0 - (time_of_the_day / tfin)
            ) + tmin_next * (time_of_the_day / tfin)

    else:
        ct = cos(1.5 * pi * time_of_the_day / day_length)

        # Return Temp
        return 0.5 * (tmin + tmax - (tmax - tmin) * ct)
