# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/16_create_vegetation_parameters.ipynb.

# %% auto 0
__all__ = ['create_vegetation_parameters']

# %% ../nbs/16_create_vegetation_parameters.ipynb 3
import os
import math
import warnings
import numpy as np
from pathlib import Path
from typing import Dict, List
from sureau_ecos_py.soil_utils import (
    compute_theta_at_given_p_soil,
    compute_theta_at_given_p_soil_camp,
)
from sureau_ecos_py.plant_utils import (
    read_vegetation_file,
    convert_f_cm3_to_v_mm,
    distribute_conductances,
)

from .create_soil_parameters import create_soil_parameters
from .create_modeling_options import create_modeling_options
from .create_stand_parameters import create_stand_parameters

# %% ../nbs/16_create_vegetation_parameters.ipynb 4
def create_vegetation_parameters(
    stand_parameters: Dict,  # Dictio<strong>not found</strong>ry created using the `create_stand_parameters` function
    soil_parameters: Dict,  # Dictio<strong>not found</strong>ry created using the `create_soil_parameters` function
    file_path: Path = None,  # Path to a csv file containing lai_max, latitude and longitude values i.e path/to/parameter_values.csv
    list_of_parameters: List = None,  # A list containing the necessary input parameters instead of reading them in file. Will only be used if 'file_path' arguement is not provided
    modeling_options: Dict = None,  # Dictio<strong>not found</strong>ry created using the `create_modeling_options` function
    sep: str = ";",  # CSV file separator can be ',' or ';'
) -> Dict:  # Dictio<strong>not found</strong>ry containing parameters to run the model
    "Create a dictio<strong>not found</strong>ry with the vegetation parameters to run \code{run.SurEauR}"

    # Assert parameters ---------------------------------------------------------

    # Make sure the file_path exist or is None
    assert file_path is None or os.path.exists(
        file_path
    ), f"Path: {file_path} <strong>not found</strong>, check spelling or set file_path = None"

    # Raise error if file_path and list_of_parameters both are missing
    if file_path is None and list_of_parameters is None:
        raise ValueError(
            "Both file_path and list_of_parameters are missing, provide one of them"
        )

    # Raise error if file_path and list_of_parameters both are provided
    if file_path is not None and list_of_parameters is not None:
        raise ValueError(
            "Both file_path and list_of_parameters are provided, only one of these two arguments should be used"
        )

    # Delete as soon the option is implemented
    if list_of_parameters is not None:
        raise ValueError(
            "Option for including list_of_parameters not implemented yet"
        )

    # Make sure that modeling_options is a dictio<strong>not found</strong>ry
    assert isinstance(
        modeling_options, Dict
    ), f"modeling_options must be a dictio<strong>not found</strong>ry not a {type(modeling_options)}"

    # Make sure that stand_parameters is a dictio<strong>not found</strong>ry
    assert isinstance(
        stand_parameters, Dict
    ), f"stand_parameters must be a dictio<strong>not found</strong>ry not a {type(stand_parameters)}"

    # Make sure that soil_parameters is a dictio<strong>not found</strong>ry
    assert isinstance(
        soil_parameters, Dict
    ), f"soil_parameters must be a dictio<strong>not found</strong>ry not a {type(soil_parameters)}"

    # Create vegetation_parameters from function inputs -------------------------

    # Read CSV file
    vegetation_parameters = read_vegetation_file(
        file_path=file_path, modeling_options=modeling_options, sep=sep
    )

    # Compute stomatal response parameters for the sigmoid from P12_gs and P88_gs
    # provided in the CSV file
    if (
        modeling_options["stomatal_reg_formulation"] == "sigmoid"
        and "p50_gs" not in vegetation_parameters
    ):
        # Calculate p50_gs
        vegetation_parameters["p50_gs"] = (
            vegetation_parameters["p88_gs"] + vegetation_parameters["p12_gs"]
        ) / 2
        vegetation_parameters["slope_gs"] = 100 / (
            vegetation_parameters["p12_gs"] - vegetation_parameters["p88_gs"]
        )

    else:
        print("p50_gs already provided")

    # Get maximum leaf area index of the stand (LAImax) from stand parameters
    vegetation_parameters["lai_max"] = stand_parameters["lai_max"]

    # Calculate root distribution within each soil layer (Jackson et al. 1996)
    warnings.warn("Make sure that depth from soil_parameters is in meters")

    # Create numpy array
    vegetation_parameters["root_distribution"] = np.array([0, 0, 0], dtype=float)

    # soil_parameters["depth"][n] is multiplied by 100 to convert it from meters
    # to centimeters

    # Layer 1
    vegetation_parameters["root_distribution"][0] = 1 - (
        vegetation_parameters["betarootprofile"]
        ** (soil_parameters["soil_depths"][0] * 100)
    )

    # Layer 2
    vegetation_parameters["root_distribution"][1] = (
        1
        - vegetation_parameters["betarootprofile"]
        ** (soil_parameters["soil_depths"][1] * 100)
    ) - vegetation_parameters["root_distribution"][0]

    # Layer 3
    vegetation_parameters["root_distribution"][2] = 1 - (
        vegetation_parameters["root_distribution"][0]
        + vegetation_parameters["root_distribution"][1]
    )

    # Calculate turgor loss point (tlp)
    tlp = (
        vegetation_parameters["pifullturgor_leaf"]
        * vegetation_parameters["epsilonsym_leaf"]
    ) / (
        vegetation_parameters["pifullturgor_leaf"]
        + vegetation_parameters["epsilonsym_leaf"]
    )

    # Pedotransfer function == vg
    if modeling_options["pedo_transfer_formulation"] == "vg":
        theta_at_tlp = compute_theta_at_given_p_soil(
            psi_target=np.abs(tlp),
            theta_res=soil_parameters["residual_capacity_vg"],
            theta_sat=soil_parameters["saturation_capacity_vg"],
            alpha_vg=soil_parameters["alpha_vg"],
            n_vg=soil_parameters["n_vg"],
        )

        theta_at_p50 = compute_theta_at_given_p_soil(
            psi_target=np.abs(vegetation_parameters["p50_vc_leaf"]),
            theta_res=soil_parameters["residual_capacity_vg"],
            theta_sat=soil_parameters["saturation_capacity_vg"],
            alpha_vg=soil_parameters["alpha_vg"],
            n_vg=soil_parameters["n_vg"],
        )

        # Compute TAW @Tlp @P12 & @P50 (Diagnoostic)
        vegetation_parameters["taw_at_tlp"] = np.sum(
            soil_parameters["v_field_capacity"]
            - convert_f_cm3_to_v_mm(
                x=theta_at_tlp,
                rock_fragment_content=soil_parameters["rock_fragment_content"],
                layer_thickness=soil_parameters["layer_thickness"],
            )
        )

        vegetation_parameters["taw_at_p50"] = np.sum(
            soil_parameters["v_field_capacity"]
            - convert_f_cm3_to_v_mm(
                x=theta_at_p50,
                rock_fragment_content=soil_parameters["rock_fragment_content"],
                layer_thickness=soil_parameters["layer_thickness"],
            )
        )

        print(
            f"Available water capacity @Tlp (VG):{vegetation_parameters['taw_at_tlp']} mm"
        )
        print(
            f"Available water capacity @P50 (VG):{vegetation_parameters['taw_at_p50']} mm"
        )

    # Pedotransfer function == Campbell
    elif modeling_options["pedo_transfer_formulation"] == "campbell":
        theta_at_tlp = compute_theta_at_given_p_soil_camp(
            psi_target=tlp,
            theta_sat=soil_parameters["saturation_capacity_campbell"],
            psie=soil_parameters["psie"],
            b_camp=soil_parameters["b_campbell"],
        )

        theta_at_p50 = compute_theta_at_given_p_soil_camp(
            psi_target=vegetation_parameters["p50_vc_leaf"],
            theta_sat=soil_parameters["saturation_capacity_campbell"],
            psie=soil_parameters["psie"],
            b_camp=soil_parameters["b_campbell"],
        )

        # Compute TAW @Tlp @P12 & @P50 (Diagnoostic)
        vegetation_parameters["taw_at_tlp"] = np.sum(
            soil_parameters["v_field_capacity"]
            - convert_f_cm3_to_v_mm(
                x=theta_at_tlp,
                rock_fragment_content=soil_parameters["rock_fragment_content"],
                layer_thickness=soil_parameters["layer_thickness"],
            )
        )

        vegetation_parameters["taw_at_p50"] = np.sum(
            soil_parameters["v_field_capacity"]
            - convert_f_cm3_to_v_mm(
                x=theta_at_p50,
                rock_fragment_content=soil_parameters["rock_fragment_content"],
                layer_thickness=soil_parameters["layer_thickness"],
            )
        )

        print(
            f"Available water capacity @Tlp (Campbell):{vegetation_parameters['taw_at_tlp']} mm"
        )
        print(
            f"Available water capacity @P50 (Campbell):{vegetation_parameters['taw_at_p50']} mm"
        )

    else:
        raise ValueError("pedo_transfer_formulation is missing")

    # Determine root lenght (La gardner cowan)

    # I am assumming that this is the LAI growth rate per day
    rai = vegetation_parameters["lai_max"] * vegetation_parameters["froottoleaf"]

    vegetation_parameters["la"] = (
        rai * vegetation_parameters["root_distribution"]
    ) / (2 * math.pi * vegetation_parameters["rootradius"])
    vegetation_parameters["lv"] = vegetation_parameters["la"] / (
        soil_parameters["layer_thickness"]
        * (1 - (soil_parameters["rock_fragment_content"] / 100))
    )

    # Calculate the different conductance of the plant from k_PlantInit
    conductances = distribute_conductances(
        k_plant_init=vegetation_parameters["k_plantinit"],
        ri=vegetation_parameters["root_distribution"],
        frac_leaf_sym=vegetation_parameters["frac_leaf_sym"],
    )

    # I am assumming that this is the Maximum conductance from trunk apoplasm to
    # the leaf apoplasm KSApo−LApo,max
    vegetation_parameters["k_slapo_init"] = conductances["k_slapo_init"]

    # I am assumming that this is the Maximum conductance from the root surface
    # to the stem apoplasm
    vegetation_parameters["k_rsapo_init"] = conductances["k_rsapo_init"]

    # I am assumming that this is the Conductance from the leaf apoplasm to leaf
    # symplasm
    vegetation_parameters["k_lsym_init"] = conductances["k_lsym_init"]

    # Add Hydaulic conductance of the plant from soil to leaves
    vegetation_parameters["k_plant_init"] = conductances["k_plant_init"]

    # Add Volume of tissue of the stem (includes the root, trunk and branches)
    # Origi<strong>not found</strong>l line is adding it twice. not added
    # TTT$vol_Stem = TTT$vol_Stem
    # vegetation_parameters['vol_stem'] = vegetation_parameters['vol_stem']

    return vegetation_parameters
